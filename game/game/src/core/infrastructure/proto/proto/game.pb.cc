// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/game.proto

#include "proto/game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR BetRecord::BetRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.playtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BetRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BetRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BetRecordDefaultTypeInternal() {}
  union {
    BetRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BetRecordDefaultTypeInternal _BetRecord_default_instance_;
PROTOBUF_CONSTEXPR ReckonRecord::ReckonRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.multi_)*/0
  , /*decltype(_impl_.playtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReckonRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReckonRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReckonRecordDefaultTypeInternal() {}
  union {
    ReckonRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReckonRecordDefaultTypeInternal _ReckonRecord_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.avatar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_.vip_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfoSnap::PlayerInfoSnap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bets_)*/{}
  , /*decltype(_impl_.reckons_)*/{}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoSnapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoSnapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoSnapDefaultTypeInternal() {}
  union {
    PlayerInfoSnap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoSnapDefaultTypeInternal _PlayerInfoSnap_default_instance_;
PROTOBUF_CONSTEXPR GameResult::GameResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.multi_)*/0
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameResultDefaultTypeInternal() {}
  union {
    GameResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameResultDefaultTypeInternal _GameResult_default_instance_;
PROTOBUF_CONSTEXPR HeartBeat::HeartBeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartBeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatDefaultTypeInternal() {}
  union {
    HeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
PROTOBUF_CONSTEXPR LoginReq::LoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loginname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginReqDefaultTypeInternal() {}
  union {
    LoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginReqDefaultTypeInternal _LoginReq_default_instance_;
PROTOBUF_CONSTEXPR LoginResp::LoginResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loginname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRespDefaultTypeInternal() {}
  union {
    LoginResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRespDefaultTypeInternal _LoginResp_default_instance_;
PROTOBUF_CONSTEXPR LogoutReq::LogoutReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loginname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutReqDefaultTypeInternal() {}
  union {
    LogoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
PROTOBUF_CONSTEXPR LogoutRes::LogoutRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loginname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogoutResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutResDefaultTypeInternal() {}
  union {
    LogoutRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutResDefaultTypeInternal _LogoutRes_default_instance_;
PROTOBUF_CONSTEXPR KickPlayerNotify::KickPlayerNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KickPlayerNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KickPlayerNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KickPlayerNotifyDefaultTypeInternal() {}
  union {
    KickPlayerNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KickPlayerNotifyDefaultTypeInternal _KickPlayerNotify_default_instance_;
PROTOBUF_CONSTEXPR GameSnapshotNotify::GameSnapshotNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/{}
  , /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gametype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remaintime_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.curindex_)*/0
  , /*decltype(_impl_.curmulti_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameSnapshotNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameSnapshotNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameSnapshotNotifyDefaultTypeInternal() {}
  union {
    GameSnapshotNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameSnapshotNotifyDefaultTypeInternal _GameSnapshotNotify_default_instance_;
PROTOBUF_CONSTEXPR MinesPlaceBetReq::MinesPlaceBetReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.playtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesPlaceBetReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesPlaceBetReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesPlaceBetReqDefaultTypeInternal() {}
  union {
    MinesPlaceBetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesPlaceBetReqDefaultTypeInternal _MinesPlaceBetReq_default_instance_;
PROTOBUF_CONSTEXPR MinesPlaceBetRes::MinesPlaceBetRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bet_)*/nullptr
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesPlaceBetResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesPlaceBetResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesPlaceBetResDefaultTypeInternal() {}
  union {
    MinesPlaceBetRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesPlaceBetResDefaultTypeInternal _MinesPlaceBetRes_default_instance_;
PROTOBUF_CONSTEXPR MinesAutoCashReq::MinesAutoCashReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enable_)*/0
  , /*decltype(_impl_.grid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesAutoCashReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesAutoCashReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesAutoCashReqDefaultTypeInternal() {}
  union {
    MinesAutoCashReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesAutoCashReqDefaultTypeInternal _MinesAutoCashReq_default_instance_;
PROTOBUF_CONSTEXPR MinesAutoCashRes::MinesAutoCashRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_.enable_)*/0
  , /*decltype(_impl_.grid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesAutoCashResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesAutoCashResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesAutoCashResDefaultTypeInternal() {}
  union {
    MinesAutoCashRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesAutoCashResDefaultTypeInternal _MinesAutoCashRes_default_instance_;
PROTOBUF_CONSTEXPR MinesCashReq::MinesCashReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesCashReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesCashReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesCashReqDefaultTypeInternal() {}
  union {
    MinesCashReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesCashReqDefaultTypeInternal _MinesCashReq_default_instance_;
PROTOBUF_CONSTEXPR MinesCashRes::MinesCashRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.reckon_)*/nullptr
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesCashResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesCashResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesCashResDefaultTypeInternal() {}
  union {
    MinesCashRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesCashResDefaultTypeInternal _MinesCashRes_default_instance_;
PROTOBUF_CONSTEXPR MinesCancelBetReq::MinesCancelBetReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesCancelBetReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesCancelBetReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesCancelBetReqDefaultTypeInternal() {}
  union {
    MinesCancelBetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesCancelBetReqDefaultTypeInternal _MinesCancelBetReq_default_instance_;
PROTOBUF_CONSTEXPR MinesCancelBetRes::MinesCancelBetRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.refundamount_)*/0
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesCancelBetResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesCancelBetResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesCancelBetResDefaultTypeInternal() {}
  union {
    MinesCancelBetRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesCancelBetResDefaultTypeInternal _MinesCancelBetRes_default_instance_;
PROTOBUF_CONSTEXPR MinesStartJettonNotify::MinesStartJettonNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gametype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MinesStartJettonNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MinesStartJettonNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MinesStartJettonNotifyDefaultTypeInternal() {}
  union {
    MinesStartJettonNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MinesStartJettonNotifyDefaultTypeInternal _MinesStartJettonNotify_default_instance_;
PROTOBUF_CONSTEXPR GameStopJettonNotify::GameStopJettonNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gametype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stoptime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameStopJettonNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameStopJettonNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameStopJettonNotifyDefaultTypeInternal() {}
  union {
    GameStopJettonNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameStopJettonNotifyDefaultTypeInternal _GameStopJettonNotify_default_instance_;
PROTOBUF_CONSTEXPR GameRankInfoNotify::GameRankInfoNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.roundid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gametype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameRankInfoNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameRankInfoNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameRankInfoNotifyDefaultTypeInternal() {}
  union {
    GameRankInfoNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameRankInfoNotifyDefaultTypeInternal _GameRankInfoNotify_default_instance_;
PROTOBUF_CONSTEXPR ConnClose::ConnClose(
    ::_pbi::ConstantInitialized) {}
struct ConnCloseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnCloseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnCloseDefaultTypeInternal() {}
  union {
    ConnClose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnCloseDefaultTypeInternal _ConnClose_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2fgame_2eproto[24];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2fgame_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2fgame_2eproto = nullptr;

const uint32_t TableStruct_proto_2fgame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BetRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::BetRecord, _impl_.playtype_),
  PROTOBUF_FIELD_OFFSET(::proto::BetRecord, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ReckonRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::ReckonRecord, _impl_.playtype_),
  PROTOBUF_FIELD_OFFSET(::proto::ReckonRecord, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::proto::ReckonRecord, _impl_.multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfo, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfo, _impl_.avatar_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfo, _impl_.vip_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfo, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfo, _impl_.currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfoSnap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfoSnap, _impl_.info_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfoSnap, _impl_.bets_),
  PROTOBUF_FIELD_OFFSET(::proto::PlayerInfoSnap, _impl_.reckons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GameResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::proto::GameResult, _impl_.multi_),
  PROTOBUF_FIELD_OFFSET(::proto::GameResult, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::HeartBeat, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LoginReq, _impl_.loginname_),
  PROTOBUF_FIELD_OFFSET(::proto::LoginReq, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::proto::LoginReq, _impl_.game_type_),
  PROTOBUF_FIELD_OFFSET(::proto::LoginReq, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::proto::LoginReq, _impl_.client_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LoginResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LoginResp, _impl_.loginname_),
  PROTOBUF_FIELD_OFFSET(::proto::LoginResp, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::proto::LoginResp, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::LoginResp, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LogoutReq, _impl_.loginname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::LogoutRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::LogoutRes, _impl_.loginname_),
  PROTOBUF_FIELD_OFFSET(::proto::LogoutRes, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::proto::LogoutRes, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::KickPlayerNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::KickPlayerNotify, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::proto::KickPlayerNotify, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GameSnapshotNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GameSnapshotNotify, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::GameSnapshotNotify, _impl_.gametype_),
  PROTOBUF_FIELD_OFFSET(::proto::GameSnapshotNotify, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::GameSnapshotNotify, _impl_.remaintime_),
  PROTOBUF_FIELD_OFFSET(::proto::GameSnapshotNotify, _impl_.curindex_),
  PROTOBUF_FIELD_OFFSET(::proto::GameSnapshotNotify, _impl_.curmulti_),
  PROTOBUF_FIELD_OFFSET(::proto::GameSnapshotNotify, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetReq, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetReq, _impl_.playtype_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetReq, _impl_.amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetRes, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetRes, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetRes, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetRes, _impl_.bet_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesPlaceBetRes, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashReq, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashReq, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashReq, _impl_.grid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashRes, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashRes, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashRes, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashRes, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesAutoCashRes, _impl_.grid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesCashReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesCashReq, _impl_.roundid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesCashRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesCashRes, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCashRes, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCashRes, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCashRes, _impl_.reckon_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCashRes, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetReq, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetReq, _impl_.playtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetRes, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetRes, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetRes, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetRes, _impl_.refundamount_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesCancelBetRes, _impl_.balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::MinesStartJettonNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::MinesStartJettonNotify, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesStartJettonNotify, _impl_.gametype_),
  PROTOBUF_FIELD_OFFSET(::proto::MinesStartJettonNotify, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GameStopJettonNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GameStopJettonNotify, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::GameStopJettonNotify, _impl_.gametype_),
  PROTOBUF_FIELD_OFFSET(::proto::GameStopJettonNotify, _impl_.stoptime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::GameRankInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::GameRankInfoNotify, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::proto::GameRankInfoNotify, _impl_.gametype_),
  PROTOBUF_FIELD_OFFSET(::proto::GameRankInfoNotify, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::ConnClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::BetRecord)},
  { 8, -1, -1, sizeof(::proto::ReckonRecord)},
  { 17, -1, -1, sizeof(::proto::PlayerInfo)},
  { 29, -1, -1, sizeof(::proto::PlayerInfoSnap)},
  { 38, -1, -1, sizeof(::proto::GameResult)},
  { 47, -1, -1, sizeof(::proto::HeartBeat)},
  { 54, -1, -1, sizeof(::proto::LoginReq)},
  { 65, -1, -1, sizeof(::proto::LoginResp)},
  { 75, -1, -1, sizeof(::proto::LogoutReq)},
  { 82, -1, -1, sizeof(::proto::LogoutRes)},
  { 91, -1, -1, sizeof(::proto::KickPlayerNotify)},
  { 99, -1, -1, sizeof(::proto::GameSnapshotNotify)},
  { 112, -1, -1, sizeof(::proto::MinesPlaceBetReq)},
  { 121, -1, -1, sizeof(::proto::MinesPlaceBetRes)},
  { 132, -1, -1, sizeof(::proto::MinesAutoCashReq)},
  { 141, -1, -1, sizeof(::proto::MinesAutoCashRes)},
  { 152, -1, -1, sizeof(::proto::MinesCashReq)},
  { 159, -1, -1, sizeof(::proto::MinesCashRes)},
  { 170, -1, -1, sizeof(::proto::MinesCancelBetReq)},
  { 178, -1, -1, sizeof(::proto::MinesCancelBetRes)},
  { 189, -1, -1, sizeof(::proto::MinesStartJettonNotify)},
  { 198, -1, -1, sizeof(::proto::GameStopJettonNotify)},
  { 207, -1, -1, sizeof(::proto::GameRankInfoNotify)},
  { 216, -1, -1, sizeof(::proto::ConnClose)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_BetRecord_default_instance_._instance,
  &::proto::_ReckonRecord_default_instance_._instance,
  &::proto::_PlayerInfo_default_instance_._instance,
  &::proto::_PlayerInfoSnap_default_instance_._instance,
  &::proto::_GameResult_default_instance_._instance,
  &::proto::_HeartBeat_default_instance_._instance,
  &::proto::_LoginReq_default_instance_._instance,
  &::proto::_LoginResp_default_instance_._instance,
  &::proto::_LogoutReq_default_instance_._instance,
  &::proto::_LogoutRes_default_instance_._instance,
  &::proto::_KickPlayerNotify_default_instance_._instance,
  &::proto::_GameSnapshotNotify_default_instance_._instance,
  &::proto::_MinesPlaceBetReq_default_instance_._instance,
  &::proto::_MinesPlaceBetRes_default_instance_._instance,
  &::proto::_MinesAutoCashReq_default_instance_._instance,
  &::proto::_MinesAutoCashRes_default_instance_._instance,
  &::proto::_MinesCashReq_default_instance_._instance,
  &::proto::_MinesCashRes_default_instance_._instance,
  &::proto::_MinesCancelBetReq_default_instance_._instance,
  &::proto::_MinesCancelBetRes_default_instance_._instance,
  &::proto::_MinesStartJettonNotify_default_instance_._instance,
  &::proto::_GameStopJettonNotify_default_instance_._instance,
  &::proto::_GameRankInfoNotify_default_instance_._instance,
  &::proto::_ConnClose_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2fgame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020proto/game.proto\022\005proto\"-\n\tBetRecord\022\020"
  "\n\010playType\030\001 \001(\005\022\016\n\006amount\030\002 \001(\001\"\?\n\014Reck"
  "onRecord\022\020\n\010playType\030\001 \001(\005\022\016\n\006amount\030\002 \001"
  "(\001\022\r\n\005multi\030\003 \001(\001\"p\n\nPlayerInfo\022\020\n\010usern"
  "ame\030\001 \001(\t\022\020\n\010nickname\030\002 \001(\t\022\016\n\006avatar\030\003 "
  "\001(\t\022\013\n\003vip\030\004 \001(\005\022\017\n\007balance\030\005 \001(\001\022\020\n\010cur"
  "rency\030\006 \001(\t\"w\n\016PlayerInfoSnap\022\037\n\004info\030\001 "
  "\001(\0132\021.proto.PlayerInfo\022\036\n\004bets\030\002 \003(\0132\020.p"
  "roto.BetRecord\022$\n\007reckons\030\003 \003(\0132\023.proto."
  "ReckonRecord\":\n\nGameResult\022\016\n\006result\030\001 \001"
  "(\005\022\r\n\005multi\030\002 \001(\001\022\r\n\005index\030\003 \001(\005\"\036\n\tHear"
  "tBeat\022\021\n\ttimestamp\030\001 \001(\003\"c\n\010LoginReq\022\021\n\t"
  "loginname\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\022\021\n\tgame_t"
  "ype\030\003 \001(\t\022\017\n\007version\030\004 \001(\r\022\021\n\tclient_ip\030"
  "\005 \001(\t\"^\n\tLoginResp\022\021\n\tloginname\030\001 \001(\t\022\014\n"
  "\004code\030\002 \001(\005\022\017\n\007message\030\003 \001(\t\022\037\n\004info\030\004 \001"
  "(\0132\021.proto.PlayerInfo\"\036\n\tLogoutReq\022\021\n\tlo"
  "ginname\030\001 \001(\t\"9\n\tLogoutRes\022\021\n\tloginname\030"
  "\001 \001(\t\022\014\n\004code\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\"5\n\020Kick"
  "PlayerNotify\022\021\n\tsessionId\030\001 \001(\t\022\016\n\006reaso"
  "n\030\002 \001(\005\"\242\001\n\022GameSnapshotNotify\022\017\n\007roundI"
  "d\030\001 \001(\t\022\020\n\010gameType\030\002 \001(\t\022\016\n\006status\030\003 \001("
  "\005\022\022\n\nremainTime\030\004 \001(\003\022\020\n\010curIndex\030\005 \001(\005\022"
  "\020\n\010curMulti\030\006 \001(\001\022!\n\006result\030\007 \003(\0132\021.prot"
  "o.GameResult\"E\n\020MinesPlaceBetReq\022\017\n\007roun"
  "dId\030\001 \001(\t\022\020\n\010playType\030\002 \001(\005\022\016\n\006amount\030\003 "
  "\001(\001\"r\n\020MinesPlaceBetRes\022\014\n\004code\030\001 \001(\005\022\017\n"
  "\007message\030\002 \001(\t\022\017\n\007roundId\030\003 \001(\t\022\035\n\003bet\030\004"
  " \001(\0132\020.proto.BetRecord\022\017\n\007balance\030\005 \001(\001\""
  "A\n\020MinesAutoCashReq\022\017\n\007roundId\030\001 \001(\t\022\016\n\006"
  "enable\030\002 \001(\005\022\014\n\004grid\030\003 \001(\005\"`\n\020MinesAutoC"
  "ashRes\022\017\n\007roundId\030\001 \001(\t\022\014\n\004code\030\002 \001(\005\022\017\n"
  "\007message\030\003 \001(\t\022\016\n\006enable\030\004 \001(\005\022\014\n\004grid\030\005"
  " \001(\005\"\037\n\014MinesCashReq\022\017\n\007roundId\030\001 \001(\t\"t\n"
  "\014MinesCashRes\022\017\n\007roundId\030\001 \001(\t\022\014\n\004code\030\002"
  " \001(\005\022\017\n\007message\030\003 \001(\t\022#\n\006reckon\030\004 \001(\0132\023."
  "proto.ReckonRecord\022\017\n\007balance\030\005 \001(\001\"6\n\021M"
  "inesCancelBetReq\022\017\n\007roundId\030\001 \001(\t\022\020\n\010pla"
  "yType\030\002 \001(\005\"j\n\021MinesCancelBetRes\022\017\n\007roun"
  "dId\030\001 \001(\t\022\014\n\004code\030\002 \001(\005\022\017\n\007message\030\003 \001(\t"
  "\022\024\n\014refundAmount\030\004 \001(\001\022\017\n\007balance\030\005 \001(\001\""
  "M\n\026MinesStartJettonNotify\022\017\n\007roundId\030\001 \001"
  "(\t\022\020\n\010gametype\030\002 \001(\t\022\020\n\010duration\030\003 \001(\003\"K"
  "\n\024GameStopJettonNotify\022\017\n\007roundId\030\001 \001(\t\022"
  "\020\n\010gameType\030\002 \001(\t\022\020\n\010stopTime\030\003 \001(\003\"_\n\022G"
  "ameRankInfoNotify\022\017\n\007roundId\030\001 \001(\t\022\020\n\010ga"
  "meType\030\002 \001(\t\022&\n\007players\030\003 \003(\0132\025.proto.Pl"
  "ayerInfoSnap\"\013\n\tConnCloseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2fgame_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2fgame_2eproto = {
    false, false, 1913, descriptor_table_protodef_proto_2fgame_2eproto,
    "proto/game.proto",
    &descriptor_table_proto_2fgame_2eproto_once, nullptr, 0, 24,
    schemas, file_default_instances, TableStruct_proto_2fgame_2eproto::offsets,
    file_level_metadata_proto_2fgame_2eproto, file_level_enum_descriptors_proto_2fgame_2eproto,
    file_level_service_descriptors_proto_2fgame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2fgame_2eproto_getter() {
  return &descriptor_table_proto_2fgame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2fgame_2eproto(&descriptor_table_proto_2fgame_2eproto);
namespace proto {

// ===================================================================

class BetRecord::_Internal {
 public:
};

BetRecord::BetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.BetRecord)
}
BetRecord::BetRecord(const BetRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BetRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){}
    , decltype(_impl_.playtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playtype_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.playtype_));
  // @@protoc_insertion_point(copy_constructor:proto.BetRecord)
}

inline void BetRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){0}
    , decltype(_impl_.playtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BetRecord::~BetRecord() {
  // @@protoc_insertion_point(destructor:proto.BetRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BetRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BetRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BetRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BetRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playtype_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.playtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BetRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BetRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BetRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playType = 1;
  if (this->_internal_playtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playtype(), target);
  }

  // double amount = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BetRecord)
  return target;
}

size_t BetRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BetRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double amount = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    total_size += 1 + 8;
  }

  // int32 playType = 1;
  if (this->_internal_playtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BetRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BetRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BetRecord::GetClassData() const { return &_class_data_; }


void BetRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BetRecord*>(&to_msg);
  auto& from = static_cast<const BetRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.BetRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = from._internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_playtype() != 0) {
    _this->_internal_set_playtype(from._internal_playtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BetRecord::CopyFrom(const BetRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BetRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BetRecord::IsInitialized() const {
  return true;
}

void BetRecord::InternalSwap(BetRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BetRecord, _impl_.playtype_)
      + sizeof(BetRecord::_impl_.playtype_)
      - PROTOBUF_FIELD_OFFSET(BetRecord, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BetRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[0]);
}

// ===================================================================

class ReckonRecord::_Internal {
 public:
};

ReckonRecord::ReckonRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ReckonRecord)
}
ReckonRecord::ReckonRecord(const ReckonRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReckonRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){}
    , decltype(_impl_.multi_){}
    , decltype(_impl_.playtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playtype_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.playtype_));
  // @@protoc_insertion_point(copy_constructor:proto.ReckonRecord)
}

inline void ReckonRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){0}
    , decltype(_impl_.multi_){0}
    , decltype(_impl_.playtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ReckonRecord::~ReckonRecord() {
  // @@protoc_insertion_point(destructor:proto.ReckonRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReckonRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReckonRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReckonRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ReckonRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playtype_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.playtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReckonRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double multi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.multi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReckonRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ReckonRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playType = 1;
  if (this->_internal_playtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playtype(), target);
  }

  // double amount = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_amount(), target);
  }

  // double multi = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi = this->_internal_multi();
  uint64_t raw_multi;
  memcpy(&raw_multi, &tmp_multi, sizeof(tmp_multi));
  if (raw_multi != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_multi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ReckonRecord)
  return target;
}

size_t ReckonRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ReckonRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double amount = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    total_size += 1 + 8;
  }

  // double multi = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi = this->_internal_multi();
  uint64_t raw_multi;
  memcpy(&raw_multi, &tmp_multi, sizeof(tmp_multi));
  if (raw_multi != 0) {
    total_size += 1 + 8;
  }

  // int32 playType = 1;
  if (this->_internal_playtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReckonRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReckonRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReckonRecord::GetClassData() const { return &_class_data_; }


void ReckonRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReckonRecord*>(&to_msg);
  auto& from = static_cast<const ReckonRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ReckonRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = from._internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi = from._internal_multi();
  uint64_t raw_multi;
  memcpy(&raw_multi, &tmp_multi, sizeof(tmp_multi));
  if (raw_multi != 0) {
    _this->_internal_set_multi(from._internal_multi());
  }
  if (from._internal_playtype() != 0) {
    _this->_internal_set_playtype(from._internal_playtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReckonRecord::CopyFrom(const ReckonRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ReckonRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReckonRecord::IsInitialized() const {
  return true;
}

void ReckonRecord::InternalSwap(ReckonRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReckonRecord, _impl_.playtype_)
      + sizeof(ReckonRecord::_impl_.playtype_)
      - PROTOBUF_FIELD_OFFSET(ReckonRecord, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReckonRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[1]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
};

PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.vip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avatar().empty()) {
    _this->_impl_.avatar_.Set(from._internal_avatar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency().empty()) {
    _this->_impl_.currency_.Set(from._internal_currency(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.balance_, &from._impl_.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vip_) -
    reinterpret_cast<char*>(&_impl_.balance_)) + sizeof(_impl_.vip_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.avatar_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.balance_){0}
    , decltype(_impl_.vip_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avatar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.avatar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.nickname_.Destroy();
  _impl_.avatar_.Destroy();
  _impl_.currency_.Destroy();
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  _impl_.avatar_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  ::memset(&_impl_.balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vip_) -
      reinterpret_cast<char*>(&_impl_.balance_)) + sizeof(_impl_.vip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlayerInfo.username"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlayerInfo.nickname"));
        } else
          goto handle_unusual;
        continue;
      // string avatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_avatar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlayerInfo.avatar"));
        } else
          goto handle_unusual;
        continue;
      // int32 vip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string currency = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_currency();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.PlayerInfo.currency"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlayerInfo.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlayerInfo.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // string avatar = 3;
  if (!this->_internal_avatar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlayerInfo.avatar");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_avatar(), target);
  }

  // int32 vip = 4;
  if (this->_internal_vip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_vip(), target);
  }

  // double balance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_balance(), target);
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PlayerInfo.currency");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string avatar = 3;
  if (!this->_internal_avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  // string currency = 6;
  if (!this->_internal_currency().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // double balance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    total_size += 1 + 8;
  }

  // int32 vip = 4;
  if (this->_internal_vip() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_avatar().empty()) {
    _this->_internal_set_avatar(from._internal_avatar());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = from._internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (from._internal_vip() != 0) {
    _this->_internal_set_vip(from._internal_vip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.avatar_, lhs_arena,
      &other->_impl_.avatar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_, lhs_arena,
      &other->_impl_.currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.vip_)
      + sizeof(PlayerInfo::_impl_.vip_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.balance_)>(
          reinterpret_cast<char*>(&_impl_.balance_),
          reinterpret_cast<char*>(&other->_impl_.balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[2]);
}

// ===================================================================

class PlayerInfoSnap::_Internal {
 public:
  static const ::proto::PlayerInfo& info(const PlayerInfoSnap* msg);
};

const ::proto::PlayerInfo&
PlayerInfoSnap::_Internal::info(const PlayerInfoSnap* msg) {
  return *msg->_impl_.info_;
}
PlayerInfoSnap::PlayerInfoSnap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PlayerInfoSnap)
}
PlayerInfoSnap::PlayerInfoSnap(const PlayerInfoSnap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfoSnap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bets_){from._impl_.bets_}
    , decltype(_impl_.reckons_){from._impl_.reckons_}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::proto::PlayerInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.PlayerInfoSnap)
}

inline void PlayerInfoSnap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bets_){arena}
    , decltype(_impl_.reckons_){arena}
    , decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerInfoSnap::~PlayerInfoSnap() {
  // @@protoc_insertion_point(destructor:proto.PlayerInfoSnap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfoSnap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bets_.~RepeatedPtrField();
  _impl_.reckons_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void PlayerInfoSnap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfoSnap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerInfoSnap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bets_.Clear();
  _impl_.reckons_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfoSnap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.PlayerInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.BetRecord bets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.ReckonRecord reckons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reckons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfoSnap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerInfoSnap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlayerInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // repeated .proto.BetRecord bets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bets_size()); i < n; i++) {
    const auto& repfield = this->_internal_bets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.ReckonRecord reckons = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reckons_size()); i < n; i++) {
    const auto& repfield = this->_internal_reckons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerInfoSnap)
  return target;
}

size_t PlayerInfoSnap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerInfoSnap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.BetRecord bets = 2;
  total_size += 1UL * this->_internal_bets_size();
  for (const auto& msg : this->_impl_.bets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.ReckonRecord reckons = 3;
  total_size += 1UL * this->_internal_reckons_size();
  for (const auto& msg : this->_impl_.reckons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto.PlayerInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfoSnap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfoSnap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfoSnap::GetClassData() const { return &_class_data_; }


void PlayerInfoSnap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfoSnap*>(&to_msg);
  auto& from = static_cast<const PlayerInfoSnap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerInfoSnap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bets_.MergeFrom(from._impl_.bets_);
  _this->_impl_.reckons_.MergeFrom(from._impl_.reckons_);
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::proto::PlayerInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfoSnap::CopyFrom(const PlayerInfoSnap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerInfoSnap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoSnap::IsInitialized() const {
  return true;
}

void PlayerInfoSnap::InternalSwap(PlayerInfoSnap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bets_.InternalSwap(&other->_impl_.bets_);
  _impl_.reckons_.InternalSwap(&other->_impl_.reckons_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfoSnap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[3]);
}

// ===================================================================

class GameResult::_Internal {
 public:
};

GameResult::GameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GameResult)
}
GameResult::GameResult(const GameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.multi_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.multi_, &from._impl_.multi_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.multi_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:proto.GameResult)
}

inline void GameResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.multi_){0}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameResult::~GameResult() {
  // @@protoc_insertion_point(destructor:proto.GameResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GameResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.multi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.multi_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double multi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.multi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // double multi = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi = this->_internal_multi();
  uint64_t raw_multi;
  memcpy(&raw_multi, &tmp_multi, sizeof(tmp_multi));
  if (raw_multi != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_multi(), target);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GameResult)
  return target;
}

size_t GameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GameResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double multi = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi = this->_internal_multi();
  uint64_t raw_multi;
  memcpy(&raw_multi, &tmp_multi, sizeof(tmp_multi));
  if (raw_multi != 0) {
    total_size += 1 + 8;
  }

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameResult::GetClassData() const { return &_class_data_; }


void GameResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameResult*>(&to_msg);
  auto& from = static_cast<const GameResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GameResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_multi = from._internal_multi();
  uint64_t raw_multi;
  memcpy(&raw_multi, &tmp_multi, sizeof(tmp_multi));
  if (raw_multi != 0) {
    _this->_internal_set_multi(from._internal_multi());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameResult::CopyFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResult::IsInitialized() const {
  return true;
}

void GameResult::InternalSwap(GameResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameResult, _impl_.index_)
      + sizeof(GameResult::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(GameResult, _impl_.multi_)>(
          reinterpret_cast<char*>(&_impl_.multi_),
          reinterpret_cast<char*>(&other->_impl_.multi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[4]);
}

// ===================================================================

class HeartBeat::_Internal {
 public:
};

HeartBeat::HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.HeartBeat)
}

inline void HeartBeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:proto.HeartBeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HeartBeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.HeartBeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HeartBeat)
  return target;
}

size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HeartBeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeat::GetClassData() const { return &_class_data_; }


void HeartBeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeat*>(&to_msg);
  auto& from = static_cast<const HeartBeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.HeartBeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  return true;
}

void HeartBeat::InternalSwap(HeartBeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[5]);
}

// ===================================================================

class LoginReq::_Internal {
 public:
};

LoginReq::LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.LoginReq)
}
LoginReq::LoginReq(const LoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loginname_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.game_type_){}
    , decltype(_impl_.client_ip_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loginname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loginname().empty()) {
    _this->_impl_.loginname_.Set(from._internal_loginname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_game_type().empty()) {
    _this->_impl_.game_type_.Set(from._internal_game_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_ip().empty()) {
    _this->_impl_.client_ip_.Set(from._internal_client_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:proto.LoginReq)
}

inline void LoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loginname_){}
    , decltype(_impl_.token_){}
    , decltype(_impl_.game_type_){}
    , decltype(_impl_.client_ip_){}
    , decltype(_impl_.version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.loginname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:proto.LoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loginname_.Destroy();
  _impl_.token_.Destroy();
  _impl_.game_type_.Destroy();
  _impl_.client_ip_.Destroy();
}

void LoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loginname_.ClearToEmpty();
  _impl_.token_.ClearToEmpty();
  _impl_.game_type_.ClearToEmpty();
  _impl_.client_ip_.ClearToEmpty();
  _impl_.version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loginname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_loginname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LoginReq.loginname"));
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LoginReq.token"));
        } else
          goto handle_unusual;
        continue;
      // string game_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_game_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LoginReq.game_type"));
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_client_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LoginReq.client_ip"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string loginname = 1;
  if (!this->_internal_loginname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginname().data(), static_cast<int>(this->_internal_loginname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LoginReq.loginname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loginname(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LoginReq.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  // string game_type = 3;
  if (!this->_internal_game_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_type().data(), static_cast<int>(this->_internal_game_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LoginReq.game_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_game_type(), target);
  }

  // uint32 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // string client_ip = 5;
  if (!this->_internal_client_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_ip().data(), static_cast<int>(this->_internal_client_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LoginReq.client_ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_client_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LoginReq)
  return target;
}

size_t LoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loginname = 1;
  if (!this->_internal_loginname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginname());
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string game_type = 3;
  if (!this->_internal_game_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_type());
  }

  // string client_ip = 5;
  if (!this->_internal_client_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_ip());
  }

  // uint32 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginReq::GetClassData() const { return &_class_data_; }


void LoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginReq*>(&to_msg);
  auto& from = static_cast<const LoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.LoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loginname().empty()) {
    _this->_internal_set_loginname(from._internal_loginname());
  }
  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_game_type().empty()) {
    _this->_internal_set_game_type(from._internal_game_type());
  }
  if (!from._internal_client_ip().empty()) {
    _this->_internal_set_client_ip(from._internal_client_ip());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginReq::CopyFrom(const LoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  return true;
}

void LoginReq::InternalSwap(LoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loginname_, lhs_arena,
      &other->_impl_.loginname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_type_, lhs_arena,
      &other->_impl_.game_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_ip_, lhs_arena,
      &other->_impl_.client_ip_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[6]);
}

// ===================================================================

class LoginResp::_Internal {
 public:
  static const ::proto::PlayerInfo& info(const LoginResp* msg);
};

const ::proto::PlayerInfo&
LoginResp::_Internal::info(const LoginResp* msg) {
  return *msg->_impl_.info_;
}
LoginResp::LoginResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.LoginResp)
}
LoginResp::LoginResp(const LoginResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loginname_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loginname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loginname().empty()) {
    _this->_impl_.loginname_.Set(from._internal_loginname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::proto::PlayerInfo(*from._impl_.info_);
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:proto.LoginResp)
}

inline void LoginResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loginname_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.info_){nullptr}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.loginname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginResp::~LoginResp() {
  // @@protoc_insertion_point(destructor:proto.LoginResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loginname_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.info_;
}

void LoginResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LoginResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loginname_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loginname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_loginname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LoginResp.loginname"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LoginResp.message"));
        } else
          goto handle_unusual;
        continue;
      // .proto.PlayerInfo info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoginResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LoginResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string loginname = 1;
  if (!this->_internal_loginname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginname().data(), static_cast<int>(this->_internal_loginname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LoginResp.loginname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loginname(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LoginResp.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .proto.PlayerInfo info = 4;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LoginResp)
  return target;
}

size_t LoginResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LoginResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loginname = 1;
  if (!this->_internal_loginname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginname());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .proto.PlayerInfo info = 4;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResp::GetClassData() const { return &_class_data_; }


void LoginResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResp*>(&to_msg);
  auto& from = static_cast<const LoginResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.LoginResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loginname().empty()) {
    _this->_internal_set_loginname(from._internal_loginname());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::proto::PlayerInfo::MergeFrom(
        from._internal_info());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResp::CopyFrom(const LoginResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LoginResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResp::IsInitialized() const {
  return true;
}

void LoginResp::InternalSwap(LoginResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loginname_, lhs_arena,
      &other->_impl_.loginname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResp, _impl_.code_)
      + sizeof(LoginResp::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(LoginResp, _impl_.info_)>(
          reinterpret_cast<char*>(&_impl_.info_),
          reinterpret_cast<char*>(&other->_impl_.info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[7]);
}

// ===================================================================

class LogoutReq::_Internal {
 public:
};

LogoutReq::LogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.LogoutReq)
}
LogoutReq::LogoutReq(const LogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loginname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loginname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loginname().empty()) {
    _this->_impl_.loginname_.Set(from._internal_loginname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.LogoutReq)
}

inline void LogoutReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loginname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.loginname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:proto.LogoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loginname_.Destroy();
}

void LogoutReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LogoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loginname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loginname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_loginname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LogoutReq.loginname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LogoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string loginname = 1;
  if (!this->_internal_loginname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginname().data(), static_cast<int>(this->_internal_loginname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LogoutReq.loginname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loginname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LogoutReq)
  return target;
}

size_t LogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LogoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loginname = 1;
  if (!this->_internal_loginname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutReq::GetClassData() const { return &_class_data_; }


void LogoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutReq*>(&to_msg);
  auto& from = static_cast<const LogoutReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.LogoutReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loginname().empty()) {
    _this->_internal_set_loginname(from._internal_loginname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {
  return true;
}

void LogoutReq::InternalSwap(LogoutReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loginname_, lhs_arena,
      &other->_impl_.loginname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[8]);
}

// ===================================================================

class LogoutRes::_Internal {
 public:
};

LogoutRes::LogoutRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.LogoutRes)
}
LogoutRes::LogoutRes(const LogoutRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogoutRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loginname_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loginname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_loginname().empty()) {
    _this->_impl_.loginname_.Set(from._internal_loginname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:proto.LogoutRes)
}

inline void LogoutRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loginname_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.loginname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loginname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogoutRes::~LogoutRes() {
  // @@protoc_insertion_point(destructor:proto.LogoutRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogoutRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loginname_.Destroy();
  _impl_.msg_.Destroy();
}

void LogoutRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogoutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LogoutRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loginname_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogoutRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string loginname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_loginname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LogoutRes.loginname"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.LogoutRes.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogoutRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.LogoutRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string loginname = 1;
  if (!this->_internal_loginname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loginname().data(), static_cast<int>(this->_internal_loginname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LogoutRes.loginname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_loginname(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.LogoutRes.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LogoutRes)
  return target;
}

size_t LogoutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LogoutRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string loginname = 1;
  if (!this->_internal_loginname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loginname());
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogoutRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogoutRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogoutRes::GetClassData() const { return &_class_data_; }


void LogoutRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogoutRes*>(&to_msg);
  auto& from = static_cast<const LogoutRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.LogoutRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_loginname().empty()) {
    _this->_internal_set_loginname(from._internal_loginname());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutRes::CopyFrom(const LogoutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LogoutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRes::IsInitialized() const {
  return true;
}

void LogoutRes::InternalSwap(LogoutRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loginname_, lhs_arena,
      &other->_impl_.loginname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[9]);
}

// ===================================================================

class KickPlayerNotify::_Internal {
 public:
};

KickPlayerNotify::KickPlayerNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.KickPlayerNotify)
}
KickPlayerNotify::KickPlayerNotify(const KickPlayerNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KickPlayerNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.reason_ = from._impl_.reason_;
  // @@protoc_insertion_point(copy_constructor:proto.KickPlayerNotify)
}

inline void KickPlayerNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sessionid_){}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KickPlayerNotify::~KickPlayerNotify() {
  // @@protoc_insertion_point(destructor:proto.KickPlayerNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KickPlayerNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionid_.Destroy();
}

void KickPlayerNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KickPlayerNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.KickPlayerNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessionid_.ClearToEmpty();
  _impl_.reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickPlayerNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sessionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.KickPlayerNotify.sessionId"));
        } else
          goto handle_unusual;
        continue;
      // int32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KickPlayerNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.KickPlayerNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.KickPlayerNotify.sessionId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sessionid(), target);
  }

  // int32 reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.KickPlayerNotify)
  return target;
}

size_t KickPlayerNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.KickPlayerNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sessionId = 1;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // int32 reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickPlayerNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KickPlayerNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickPlayerNotify::GetClassData() const { return &_class_data_; }


void KickPlayerNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KickPlayerNotify*>(&to_msg);
  auto& from = static_cast<const KickPlayerNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.KickPlayerNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickPlayerNotify::CopyFrom(const KickPlayerNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.KickPlayerNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickPlayerNotify::IsInitialized() const {
  return true;
}

void KickPlayerNotify::InternalSwap(KickPlayerNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  swap(_impl_.reason_, other->_impl_.reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickPlayerNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[10]);
}

// ===================================================================

class GameSnapshotNotify::_Internal {
 public:
};

GameSnapshotNotify::GameSnapshotNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GameSnapshotNotify)
}
GameSnapshotNotify::GameSnapshotNotify(const GameSnapshotNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameSnapshotNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){from._impl_.result_}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.gametype_){}
    , decltype(_impl_.remaintime_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.curindex_){}
    , decltype(_impl_.curmulti_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gametype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gametype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gametype().empty()) {
    _this->_impl_.gametype_.Set(from._internal_gametype(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.remaintime_, &from._impl_.remaintime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.curmulti_) -
    reinterpret_cast<char*>(&_impl_.remaintime_)) + sizeof(_impl_.curmulti_));
  // @@protoc_insertion_point(copy_constructor:proto.GameSnapshotNotify)
}

inline void GameSnapshotNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){arena}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.gametype_){}
    , decltype(_impl_.remaintime_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.curindex_){0}
    , decltype(_impl_.curmulti_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gametype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gametype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameSnapshotNotify::~GameSnapshotNotify() {
  // @@protoc_insertion_point(destructor:proto.GameSnapshotNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameSnapshotNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.result_.~RepeatedPtrField();
  _impl_.roundid_.Destroy();
  _impl_.gametype_.Destroy();
}

void GameSnapshotNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameSnapshotNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GameSnapshotNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_.Clear();
  _impl_.roundid_.ClearToEmpty();
  _impl_.gametype_.ClearToEmpty();
  ::memset(&_impl_.remaintime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.curmulti_) -
      reinterpret_cast<char*>(&_impl_.remaintime_)) + sizeof(_impl_.curmulti_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameSnapshotNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GameSnapshotNotify.roundId"));
        } else
          goto handle_unusual;
        continue;
      // string gameType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gametype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GameSnapshotNotify.gameType"));
        } else
          goto handle_unusual;
        continue;
      // int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 remainTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.remaintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.curindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double curMulti = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.curmulti_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.GameResult result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameSnapshotNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameSnapshotNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GameSnapshotNotify.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // string gameType = 2;
  if (!this->_internal_gametype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gametype().data(), static_cast<int>(this->_internal_gametype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GameSnapshotNotify.gameType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gametype(), target);
  }

  // int32 status = 3;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // int64 remainTime = 4;
  if (this->_internal_remaintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_remaintime(), target);
  }

  // int32 curIndex = 5;
  if (this->_internal_curindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_curindex(), target);
  }

  // double curMulti = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curmulti = this->_internal_curmulti();
  uint64_t raw_curmulti;
  memcpy(&raw_curmulti, &tmp_curmulti, sizeof(tmp_curmulti));
  if (raw_curmulti != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_curmulti(), target);
  }

  // repeated .proto.GameResult result = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GameSnapshotNotify)
  return target;
}

size_t GameSnapshotNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GameSnapshotNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.GameResult result = 7;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->_impl_.result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // string gameType = 2;
  if (!this->_internal_gametype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gametype());
  }

  // int64 remainTime = 4;
  if (this->_internal_remaintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remaintime());
  }

  // int32 status = 3;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int32 curIndex = 5;
  if (this->_internal_curindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curindex());
  }

  // double curMulti = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curmulti = this->_internal_curmulti();
  uint64_t raw_curmulti;
  memcpy(&raw_curmulti, &tmp_curmulti, sizeof(tmp_curmulti));
  if (raw_curmulti != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameSnapshotNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameSnapshotNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameSnapshotNotify::GetClassData() const { return &_class_data_; }


void GameSnapshotNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameSnapshotNotify*>(&to_msg);
  auto& from = static_cast<const GameSnapshotNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GameSnapshotNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.result_.MergeFrom(from._impl_.result_);
  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (!from._internal_gametype().empty()) {
    _this->_internal_set_gametype(from._internal_gametype());
  }
  if (from._internal_remaintime() != 0) {
    _this->_internal_set_remaintime(from._internal_remaintime());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_curindex() != 0) {
    _this->_internal_set_curindex(from._internal_curindex());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curmulti = from._internal_curmulti();
  uint64_t raw_curmulti;
  memcpy(&raw_curmulti, &tmp_curmulti, sizeof(tmp_curmulti));
  if (raw_curmulti != 0) {
    _this->_internal_set_curmulti(from._internal_curmulti());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameSnapshotNotify::CopyFrom(const GameSnapshotNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GameSnapshotNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSnapshotNotify::IsInitialized() const {
  return true;
}

void GameSnapshotNotify::InternalSwap(GameSnapshotNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.result_.InternalSwap(&other->_impl_.result_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gametype_, lhs_arena,
      &other->_impl_.gametype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameSnapshotNotify, _impl_.curmulti_)
      + sizeof(GameSnapshotNotify::_impl_.curmulti_)
      - PROTOBUF_FIELD_OFFSET(GameSnapshotNotify, _impl_.remaintime_)>(
          reinterpret_cast<char*>(&_impl_.remaintime_),
          reinterpret_cast<char*>(&other->_impl_.remaintime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSnapshotNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[11]);
}

// ===================================================================

class MinesPlaceBetReq::_Internal {
 public:
};

MinesPlaceBetReq::MinesPlaceBetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesPlaceBetReq)
}
MinesPlaceBetReq::MinesPlaceBetReq(const MinesPlaceBetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesPlaceBetReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.playtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playtype_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.playtype_));
  // @@protoc_insertion_point(copy_constructor:proto.MinesPlaceBetReq)
}

inline void MinesPlaceBetReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.playtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesPlaceBetReq::~MinesPlaceBetReq() {
  // @@protoc_insertion_point(destructor:proto.MinesPlaceBetReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesPlaceBetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
}

void MinesPlaceBetReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesPlaceBetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesPlaceBetReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playtype_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.playtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesPlaceBetReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesPlaceBetReq.roundId"));
        } else
          goto handle_unusual;
        continue;
      // int32 playType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesPlaceBetReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesPlaceBetReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesPlaceBetReq.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // int32 playType = 2;
  if (this->_internal_playtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playtype(), target);
  }

  // double amount = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesPlaceBetReq)
  return target;
}

size_t MinesPlaceBetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesPlaceBetReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // double amount = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    total_size += 1 + 8;
  }

  // int32 playType = 2;
  if (this->_internal_playtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesPlaceBetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesPlaceBetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesPlaceBetReq::GetClassData() const { return &_class_data_; }


void MinesPlaceBetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesPlaceBetReq*>(&to_msg);
  auto& from = static_cast<const MinesPlaceBetReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesPlaceBetReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = from._internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_playtype() != 0) {
    _this->_internal_set_playtype(from._internal_playtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesPlaceBetReq::CopyFrom(const MinesPlaceBetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesPlaceBetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesPlaceBetReq::IsInitialized() const {
  return true;
}

void MinesPlaceBetReq::InternalSwap(MinesPlaceBetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinesPlaceBetReq, _impl_.playtype_)
      + sizeof(MinesPlaceBetReq::_impl_.playtype_)
      - PROTOBUF_FIELD_OFFSET(MinesPlaceBetReq, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesPlaceBetReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[12]);
}

// ===================================================================

class MinesPlaceBetRes::_Internal {
 public:
  static const ::proto::BetRecord& bet(const MinesPlaceBetRes* msg);
};

const ::proto::BetRecord&
MinesPlaceBetRes::_Internal::bet(const MinesPlaceBetRes* msg) {
  return *msg->_impl_.bet_;
}
MinesPlaceBetRes::MinesPlaceBetRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesPlaceBetRes)
}
MinesPlaceBetRes::MinesPlaceBetRes(const MinesPlaceBetRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesPlaceBetRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.bet_){nullptr}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_bet()) {
    _this->_impl_.bet_ = new ::proto::BetRecord(*from._impl_.bet_);
  }
  ::memcpy(&_impl_.balance_, &from._impl_.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.balance_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:proto.MinesPlaceBetRes)
}

inline void MinesPlaceBetRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.bet_){nullptr}
    , decltype(_impl_.balance_){0}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesPlaceBetRes::~MinesPlaceBetRes() {
  // @@protoc_insertion_point(destructor:proto.MinesPlaceBetRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesPlaceBetRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.roundid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bet_;
}

void MinesPlaceBetRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesPlaceBetRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesPlaceBetRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.roundid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.bet_ != nullptr) {
    delete _impl_.bet_;
  }
  _impl_.bet_ = nullptr;
  ::memset(&_impl_.balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.balance_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesPlaceBetRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesPlaceBetRes.message"));
        } else
          goto handle_unusual;
        continue;
      // string roundId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesPlaceBetRes.roundId"));
        } else
          goto handle_unusual;
        continue;
      // .proto.BetRecord bet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesPlaceBetRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesPlaceBetRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesPlaceBetRes.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string roundId = 3;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesPlaceBetRes.roundId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_roundid(), target);
  }

  // .proto.BetRecord bet = 4;
  if (this->_internal_has_bet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bet(this),
        _Internal::bet(this).GetCachedSize(), target, stream);
  }

  // double balance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesPlaceBetRes)
  return target;
}

size_t MinesPlaceBetRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesPlaceBetRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string roundId = 3;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // .proto.BetRecord bet = 4;
  if (this->_internal_has_bet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bet_);
  }

  // double balance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    total_size += 1 + 8;
  }

  // int32 code = 1;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesPlaceBetRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesPlaceBetRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesPlaceBetRes::GetClassData() const { return &_class_data_; }


void MinesPlaceBetRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesPlaceBetRes*>(&to_msg);
  auto& from = static_cast<const MinesPlaceBetRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesPlaceBetRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (from._internal_has_bet()) {
    _this->_internal_mutable_bet()->::proto::BetRecord::MergeFrom(
        from._internal_bet());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = from._internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesPlaceBetRes::CopyFrom(const MinesPlaceBetRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesPlaceBetRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesPlaceBetRes::IsInitialized() const {
  return true;
}

void MinesPlaceBetRes::InternalSwap(MinesPlaceBetRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinesPlaceBetRes, _impl_.code_)
      + sizeof(MinesPlaceBetRes::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(MinesPlaceBetRes, _impl_.bet_)>(
          reinterpret_cast<char*>(&_impl_.bet_),
          reinterpret_cast<char*>(&other->_impl_.bet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesPlaceBetRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[13]);
}

// ===================================================================

class MinesAutoCashReq::_Internal {
 public:
};

MinesAutoCashReq::MinesAutoCashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesAutoCashReq)
}
MinesAutoCashReq::MinesAutoCashReq(const MinesAutoCashReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesAutoCashReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.grid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.enable_, &from._impl_.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grid_) -
    reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.grid_));
  // @@protoc_insertion_point(copy_constructor:proto.MinesAutoCashReq)
}

inline void MinesAutoCashReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.enable_){0}
    , decltype(_impl_.grid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesAutoCashReq::~MinesAutoCashReq() {
  // @@protoc_insertion_point(destructor:proto.MinesAutoCashReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesAutoCashReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
}

void MinesAutoCashReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesAutoCashReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesAutoCashReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  ::memset(&_impl_.enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grid_) -
      reinterpret_cast<char*>(&_impl_.enable_)) + sizeof(_impl_.grid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesAutoCashReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesAutoCashReq.roundId"));
        } else
          goto handle_unusual;
        continue;
      // int32 enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesAutoCashReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesAutoCashReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesAutoCashReq.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // int32 enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_enable(), target);
  }

  // int32 grid = 3;
  if (this->_internal_grid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_grid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesAutoCashReq)
  return target;
}

size_t MinesAutoCashReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesAutoCashReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // int32 enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enable());
  }

  // int32 grid = 3;
  if (this->_internal_grid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesAutoCashReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesAutoCashReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesAutoCashReq::GetClassData() const { return &_class_data_; }


void MinesAutoCashReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesAutoCashReq*>(&to_msg);
  auto& from = static_cast<const MinesAutoCashReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesAutoCashReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  if (from._internal_grid() != 0) {
    _this->_internal_set_grid(from._internal_grid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesAutoCashReq::CopyFrom(const MinesAutoCashReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesAutoCashReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesAutoCashReq::IsInitialized() const {
  return true;
}

void MinesAutoCashReq::InternalSwap(MinesAutoCashReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinesAutoCashReq, _impl_.grid_)
      + sizeof(MinesAutoCashReq::_impl_.grid_)
      - PROTOBUF_FIELD_OFFSET(MinesAutoCashReq, _impl_.enable_)>(
          reinterpret_cast<char*>(&_impl_.enable_),
          reinterpret_cast<char*>(&other->_impl_.enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesAutoCashReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[14]);
}

// ===================================================================

class MinesAutoCashRes::_Internal {
 public:
};

MinesAutoCashRes::MinesAutoCashRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesAutoCashRes)
}
MinesAutoCashRes::MinesAutoCashRes(const MinesAutoCashRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesAutoCashRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.grid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.code_, &from._impl_.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grid_) -
    reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.grid_));
  // @@protoc_insertion_point(copy_constructor:proto.MinesAutoCashRes)
}

inline void MinesAutoCashRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){0}
    , decltype(_impl_.enable_){0}
    , decltype(_impl_.grid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesAutoCashRes::~MinesAutoCashRes() {
  // @@protoc_insertion_point(destructor:proto.MinesAutoCashRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesAutoCashRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
  _impl_.message_.Destroy();
}

void MinesAutoCashRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesAutoCashRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesAutoCashRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grid_) -
      reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.grid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesAutoCashRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesAutoCashRes.roundId"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesAutoCashRes.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesAutoCashRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesAutoCashRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesAutoCashRes.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesAutoCashRes.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // int32 enable = 4;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_enable(), target);
  }

  // int32 grid = 5;
  if (this->_internal_grid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_grid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesAutoCashRes)
  return target;
}

size_t MinesAutoCashRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesAutoCashRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  // int32 enable = 4;
  if (this->_internal_enable() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enable());
  }

  // int32 grid = 5;
  if (this->_internal_grid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesAutoCashRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesAutoCashRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesAutoCashRes::GetClassData() const { return &_class_data_; }


void MinesAutoCashRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesAutoCashRes*>(&to_msg);
  auto& from = static_cast<const MinesAutoCashRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesAutoCashRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  if (from._internal_grid() != 0) {
    _this->_internal_set_grid(from._internal_grid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesAutoCashRes::CopyFrom(const MinesAutoCashRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesAutoCashRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesAutoCashRes::IsInitialized() const {
  return true;
}

void MinesAutoCashRes::InternalSwap(MinesAutoCashRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinesAutoCashRes, _impl_.grid_)
      + sizeof(MinesAutoCashRes::_impl_.grid_)
      - PROTOBUF_FIELD_OFFSET(MinesAutoCashRes, _impl_.code_)>(
          reinterpret_cast<char*>(&_impl_.code_),
          reinterpret_cast<char*>(&other->_impl_.code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesAutoCashRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[15]);
}

// ===================================================================

class MinesCashReq::_Internal {
 public:
};

MinesCashReq::MinesCashReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesCashReq)
}
MinesCashReq::MinesCashReq(const MinesCashReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesCashReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.MinesCashReq)
}

inline void MinesCashReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesCashReq::~MinesCashReq() {
  // @@protoc_insertion_point(destructor:proto.MinesCashReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesCashReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
}

void MinesCashReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesCashReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesCashReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesCashReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesCashReq.roundId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesCashReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesCashReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesCashReq.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesCashReq)
  return target;
}

size_t MinesCashReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesCashReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesCashReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesCashReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesCashReq::GetClassData() const { return &_class_data_; }


void MinesCashReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesCashReq*>(&to_msg);
  auto& from = static_cast<const MinesCashReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesCashReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesCashReq::CopyFrom(const MinesCashReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesCashReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesCashReq::IsInitialized() const {
  return true;
}

void MinesCashReq::InternalSwap(MinesCashReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesCashReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[16]);
}

// ===================================================================

class MinesCashRes::_Internal {
 public:
  static const ::proto::ReckonRecord& reckon(const MinesCashRes* msg);
};

const ::proto::ReckonRecord&
MinesCashRes::_Internal::reckon(const MinesCashRes* msg) {
  return *msg->_impl_.reckon_;
}
MinesCashRes::MinesCashRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesCashRes)
}
MinesCashRes::MinesCashRes(const MinesCashRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesCashRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.reckon_){nullptr}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_reckon()) {
    _this->_impl_.reckon_ = new ::proto::ReckonRecord(*from._impl_.reckon_);
  }
  ::memcpy(&_impl_.balance_, &from._impl_.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.balance_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:proto.MinesCashRes)
}

inline void MinesCashRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.reckon_){nullptr}
    , decltype(_impl_.balance_){0}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesCashRes::~MinesCashRes() {
  // @@protoc_insertion_point(destructor:proto.MinesCashRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesCashRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.reckon_;
}

void MinesCashRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesCashRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesCashRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.reckon_ != nullptr) {
    delete _impl_.reckon_;
  }
  _impl_.reckon_ = nullptr;
  ::memset(&_impl_.balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.balance_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesCashRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesCashRes.roundId"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesCashRes.message"));
        } else
          goto handle_unusual;
        continue;
      // .proto.ReckonRecord reckon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reckon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesCashRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesCashRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesCashRes.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesCashRes.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .proto.ReckonRecord reckon = 4;
  if (this->_internal_has_reckon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::reckon(this),
        _Internal::reckon(this).GetCachedSize(), target, stream);
  }

  // double balance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesCashRes)
  return target;
}

size_t MinesCashRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesCashRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .proto.ReckonRecord reckon = 4;
  if (this->_internal_has_reckon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reckon_);
  }

  // double balance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    total_size += 1 + 8;
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesCashRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesCashRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesCashRes::GetClassData() const { return &_class_data_; }


void MinesCashRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesCashRes*>(&to_msg);
  auto& from = static_cast<const MinesCashRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesCashRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_has_reckon()) {
    _this->_internal_mutable_reckon()->::proto::ReckonRecord::MergeFrom(
        from._internal_reckon());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = from._internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesCashRes::CopyFrom(const MinesCashRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesCashRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesCashRes::IsInitialized() const {
  return true;
}

void MinesCashRes::InternalSwap(MinesCashRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinesCashRes, _impl_.code_)
      + sizeof(MinesCashRes::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(MinesCashRes, _impl_.reckon_)>(
          reinterpret_cast<char*>(&_impl_.reckon_),
          reinterpret_cast<char*>(&other->_impl_.reckon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesCashRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[17]);
}

// ===================================================================

class MinesCancelBetReq::_Internal {
 public:
};

MinesCancelBetReq::MinesCancelBetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesCancelBetReq)
}
MinesCancelBetReq::MinesCancelBetReq(const MinesCancelBetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesCancelBetReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.playtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playtype_ = from._impl_.playtype_;
  // @@protoc_insertion_point(copy_constructor:proto.MinesCancelBetReq)
}

inline void MinesCancelBetReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.playtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesCancelBetReq::~MinesCancelBetReq() {
  // @@protoc_insertion_point(destructor:proto.MinesCancelBetReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesCancelBetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
}

void MinesCancelBetReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesCancelBetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesCancelBetReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  _impl_.playtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesCancelBetReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesCancelBetReq.roundId"));
        } else
          goto handle_unusual;
        continue;
      // int32 playType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesCancelBetReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesCancelBetReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesCancelBetReq.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // int32 playType = 2;
  if (this->_internal_playtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesCancelBetReq)
  return target;
}

size_t MinesCancelBetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesCancelBetReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // int32 playType = 2;
  if (this->_internal_playtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesCancelBetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesCancelBetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesCancelBetReq::GetClassData() const { return &_class_data_; }


void MinesCancelBetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesCancelBetReq*>(&to_msg);
  auto& from = static_cast<const MinesCancelBetReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesCancelBetReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (from._internal_playtype() != 0) {
    _this->_internal_set_playtype(from._internal_playtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesCancelBetReq::CopyFrom(const MinesCancelBetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesCancelBetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesCancelBetReq::IsInitialized() const {
  return true;
}

void MinesCancelBetReq::InternalSwap(MinesCancelBetReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  swap(_impl_.playtype_, other->_impl_.playtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesCancelBetReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[18]);
}

// ===================================================================

class MinesCancelBetRes::_Internal {
 public:
};

MinesCancelBetRes::MinesCancelBetRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesCancelBetRes)
}
MinesCancelBetRes::MinesCancelBetRes(const MinesCancelBetRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesCancelBetRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.refundamount_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.refundamount_, &from._impl_.refundamount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.refundamount_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:proto.MinesCancelBetRes)
}

inline void MinesCancelBetRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.refundamount_){0}
    , decltype(_impl_.balance_){0}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesCancelBetRes::~MinesCancelBetRes() {
  // @@protoc_insertion_point(destructor:proto.MinesCancelBetRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesCancelBetRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
  _impl_.message_.Destroy();
}

void MinesCancelBetRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesCancelBetRes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesCancelBetRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.refundamount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.refundamount_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesCancelBetRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesCancelBetRes.roundId"));
        } else
          goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesCancelBetRes.message"));
        } else
          goto handle_unusual;
        continue;
      // double refundAmount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.refundamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesCancelBetRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesCancelBetRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesCancelBetRes.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesCancelBetRes.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // double refundAmount = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_refundamount = this->_internal_refundamount();
  uint64_t raw_refundamount;
  memcpy(&raw_refundamount, &tmp_refundamount, sizeof(tmp_refundamount));
  if (raw_refundamount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_refundamount(), target);
  }

  // double balance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesCancelBetRes)
  return target;
}

size_t MinesCancelBetRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesCancelBetRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // double refundAmount = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_refundamount = this->_internal_refundamount();
  uint64_t raw_refundamount;
  memcpy(&raw_refundamount, &tmp_refundamount, sizeof(tmp_refundamount));
  if (raw_refundamount != 0) {
    total_size += 1 + 8;
  }

  // double balance = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = this->_internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    total_size += 1 + 8;
  }

  // int32 code = 2;
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesCancelBetRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesCancelBetRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesCancelBetRes::GetClassData() const { return &_class_data_; }


void MinesCancelBetRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesCancelBetRes*>(&to_msg);
  auto& from = static_cast<const MinesCancelBetRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesCancelBetRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_refundamount = from._internal_refundamount();
  uint64_t raw_refundamount;
  memcpy(&raw_refundamount, &tmp_refundamount, sizeof(tmp_refundamount));
  if (raw_refundamount != 0) {
    _this->_internal_set_refundamount(from._internal_refundamount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_balance = from._internal_balance();
  uint64_t raw_balance;
  memcpy(&raw_balance, &tmp_balance, sizeof(tmp_balance));
  if (raw_balance != 0) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesCancelBetRes::CopyFrom(const MinesCancelBetRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesCancelBetRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesCancelBetRes::IsInitialized() const {
  return true;
}

void MinesCancelBetRes::InternalSwap(MinesCancelBetRes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinesCancelBetRes, _impl_.code_)
      + sizeof(MinesCancelBetRes::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(MinesCancelBetRes, _impl_.refundamount_)>(
          reinterpret_cast<char*>(&_impl_.refundamount_),
          reinterpret_cast<char*>(&other->_impl_.refundamount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesCancelBetRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[19]);
}

// ===================================================================

class MinesStartJettonNotify::_Internal {
 public:
};

MinesStartJettonNotify::MinesStartJettonNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.MinesStartJettonNotify)
}
MinesStartJettonNotify::MinesStartJettonNotify(const MinesStartJettonNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MinesStartJettonNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.gametype_){}
    , decltype(_impl_.duration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gametype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gametype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gametype().empty()) {
    _this->_impl_.gametype_.Set(from._internal_gametype(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.duration_ = from._impl_.duration_;
  // @@protoc_insertion_point(copy_constructor:proto.MinesStartJettonNotify)
}

inline void MinesStartJettonNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.gametype_){}
    , decltype(_impl_.duration_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gametype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gametype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MinesStartJettonNotify::~MinesStartJettonNotify() {
  // @@protoc_insertion_point(destructor:proto.MinesStartJettonNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MinesStartJettonNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
  _impl_.gametype_.Destroy();
}

void MinesStartJettonNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MinesStartJettonNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MinesStartJettonNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  _impl_.gametype_.ClearToEmpty();
  _impl_.duration_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinesStartJettonNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesStartJettonNotify.roundId"));
        } else
          goto handle_unusual;
        continue;
      // string gametype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gametype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.MinesStartJettonNotify.gametype"));
        } else
          goto handle_unusual;
        continue;
      // int64 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MinesStartJettonNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.MinesStartJettonNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesStartJettonNotify.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // string gametype = 2;
  if (!this->_internal_gametype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gametype().data(), static_cast<int>(this->_internal_gametype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.MinesStartJettonNotify.gametype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gametype(), target);
  }

  // int64 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MinesStartJettonNotify)
  return target;
}

size_t MinesStartJettonNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MinesStartJettonNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // string gametype = 2;
  if (!this->_internal_gametype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gametype());
  }

  // int64 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MinesStartJettonNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MinesStartJettonNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MinesStartJettonNotify::GetClassData() const { return &_class_data_; }


void MinesStartJettonNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MinesStartJettonNotify*>(&to_msg);
  auto& from = static_cast<const MinesStartJettonNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.MinesStartJettonNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (!from._internal_gametype().empty()) {
    _this->_internal_set_gametype(from._internal_gametype());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MinesStartJettonNotify::CopyFrom(const MinesStartJettonNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MinesStartJettonNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinesStartJettonNotify::IsInitialized() const {
  return true;
}

void MinesStartJettonNotify::InternalSwap(MinesStartJettonNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gametype_, lhs_arena,
      &other->_impl_.gametype_, rhs_arena
  );
  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MinesStartJettonNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[20]);
}

// ===================================================================

class GameStopJettonNotify::_Internal {
 public:
};

GameStopJettonNotify::GameStopJettonNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GameStopJettonNotify)
}
GameStopJettonNotify::GameStopJettonNotify(const GameStopJettonNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameStopJettonNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.gametype_){}
    , decltype(_impl_.stoptime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gametype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gametype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gametype().empty()) {
    _this->_impl_.gametype_.Set(from._internal_gametype(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.stoptime_ = from._impl_.stoptime_;
  // @@protoc_insertion_point(copy_constructor:proto.GameStopJettonNotify)
}

inline void GameStopJettonNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.gametype_){}
    , decltype(_impl_.stoptime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gametype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gametype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameStopJettonNotify::~GameStopJettonNotify() {
  // @@protoc_insertion_point(destructor:proto.GameStopJettonNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameStopJettonNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roundid_.Destroy();
  _impl_.gametype_.Destroy();
}

void GameStopJettonNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameStopJettonNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GameStopJettonNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roundid_.ClearToEmpty();
  _impl_.gametype_.ClearToEmpty();
  _impl_.stoptime_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameStopJettonNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GameStopJettonNotify.roundId"));
        } else
          goto handle_unusual;
        continue;
      // string gameType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gametype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GameStopJettonNotify.gameType"));
        } else
          goto handle_unusual;
        continue;
      // int64 stopTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stoptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameStopJettonNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameStopJettonNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GameStopJettonNotify.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // string gameType = 2;
  if (!this->_internal_gametype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gametype().data(), static_cast<int>(this->_internal_gametype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GameStopJettonNotify.gameType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gametype(), target);
  }

  // int64 stopTime = 3;
  if (this->_internal_stoptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_stoptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GameStopJettonNotify)
  return target;
}

size_t GameStopJettonNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GameStopJettonNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // string gameType = 2;
  if (!this->_internal_gametype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gametype());
  }

  // int64 stopTime = 3;
  if (this->_internal_stoptime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_stoptime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameStopJettonNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameStopJettonNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameStopJettonNotify::GetClassData() const { return &_class_data_; }


void GameStopJettonNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameStopJettonNotify*>(&to_msg);
  auto& from = static_cast<const GameStopJettonNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GameStopJettonNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (!from._internal_gametype().empty()) {
    _this->_internal_set_gametype(from._internal_gametype());
  }
  if (from._internal_stoptime() != 0) {
    _this->_internal_set_stoptime(from._internal_stoptime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameStopJettonNotify::CopyFrom(const GameStopJettonNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GameStopJettonNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStopJettonNotify::IsInitialized() const {
  return true;
}

void GameStopJettonNotify::InternalSwap(GameStopJettonNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gametype_, lhs_arena,
      &other->_impl_.gametype_, rhs_arena
  );
  swap(_impl_.stoptime_, other->_impl_.stoptime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStopJettonNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[21]);
}

// ===================================================================

class GameRankInfoNotify::_Internal {
 public:
};

GameRankInfoNotify::GameRankInfoNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.GameRankInfoNotify)
}
GameRankInfoNotify::GameRankInfoNotify(const GameRankInfoNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameRankInfoNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.gametype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roundid().empty()) {
    _this->_impl_.roundid_.Set(from._internal_roundid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gametype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gametype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gametype().empty()) {
    _this->_impl_.gametype_.Set(from._internal_gametype(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.GameRankInfoNotify)
}

inline void GameRankInfoNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.gametype_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roundid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roundid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gametype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gametype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameRankInfoNotify::~GameRankInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.GameRankInfoNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameRankInfoNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.roundid_.Destroy();
  _impl_.gametype_.Destroy();
}

void GameRankInfoNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameRankInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GameRankInfoNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.roundid_.ClearToEmpty();
  _impl_.gametype_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameRankInfoNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roundid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GameRankInfoNotify.roundId"));
        } else
          goto handle_unusual;
        continue;
      // string gameType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gametype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.GameRankInfoNotify.gameType"));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.PlayerInfoSnap players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameRankInfoNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.GameRankInfoNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roundid().data(), static_cast<int>(this->_internal_roundid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GameRankInfoNotify.roundId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roundid(), target);
  }

  // string gameType = 2;
  if (!this->_internal_gametype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gametype().data(), static_cast<int>(this->_internal_gametype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.GameRankInfoNotify.gameType");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gametype(), target);
  }

  // repeated .proto.PlayerInfoSnap players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GameRankInfoNotify)
  return target;
}

size_t GameRankInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GameRankInfoNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.PlayerInfoSnap players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string roundId = 1;
  if (!this->_internal_roundid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roundid());
  }

  // string gameType = 2;
  if (!this->_internal_gametype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gametype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameRankInfoNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameRankInfoNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameRankInfoNotify::GetClassData() const { return &_class_data_; }


void GameRankInfoNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameRankInfoNotify*>(&to_msg);
  auto& from = static_cast<const GameRankInfoNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.GameRankInfoNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_roundid().empty()) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (!from._internal_gametype().empty()) {
    _this->_internal_set_gametype(from._internal_gametype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameRankInfoNotify::CopyFrom(const GameRankInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GameRankInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRankInfoNotify::IsInitialized() const {
  return true;
}

void GameRankInfoNotify::InternalSwap(GameRankInfoNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roundid_, lhs_arena,
      &other->_impl_.roundid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gametype_, lhs_arena,
      &other->_impl_.gametype_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameRankInfoNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[22]);
}

// ===================================================================

class ConnClose::_Internal {
 public:
};

ConnClose::ConnClose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.ConnClose)
}
ConnClose::ConnClose(const ConnClose& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ConnClose* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ConnClose)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnClose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnClose::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ConnClose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2fgame_2eproto_getter, &descriptor_table_proto_2fgame_2eproto_once,
      file_level_metadata_proto_2fgame_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::BetRecord*
Arena::CreateMaybeMessage< ::proto::BetRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BetRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ReckonRecord*
Arena::CreateMaybeMessage< ::proto::ReckonRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ReckonRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PlayerInfo*
Arena::CreateMaybeMessage< ::proto::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PlayerInfoSnap*
Arena::CreateMaybeMessage< ::proto::PlayerInfoSnap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PlayerInfoSnap >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GameResult*
Arena::CreateMaybeMessage< ::proto::GameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::HeartBeat*
Arena::CreateMaybeMessage< ::proto::HeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::HeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LoginReq*
Arena::CreateMaybeMessage< ::proto::LoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LoginResp*
Arena::CreateMaybeMessage< ::proto::LoginResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LoginResp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LogoutReq*
Arena::CreateMaybeMessage< ::proto::LogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::LogoutRes*
Arena::CreateMaybeMessage< ::proto::LogoutRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::LogoutRes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::KickPlayerNotify*
Arena::CreateMaybeMessage< ::proto::KickPlayerNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::KickPlayerNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GameSnapshotNotify*
Arena::CreateMaybeMessage< ::proto::GameSnapshotNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GameSnapshotNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesPlaceBetReq*
Arena::CreateMaybeMessage< ::proto::MinesPlaceBetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesPlaceBetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesPlaceBetRes*
Arena::CreateMaybeMessage< ::proto::MinesPlaceBetRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesPlaceBetRes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesAutoCashReq*
Arena::CreateMaybeMessage< ::proto::MinesAutoCashReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesAutoCashReq >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesAutoCashRes*
Arena::CreateMaybeMessage< ::proto::MinesAutoCashRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesAutoCashRes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesCashReq*
Arena::CreateMaybeMessage< ::proto::MinesCashReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesCashReq >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesCashRes*
Arena::CreateMaybeMessage< ::proto::MinesCashRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesCashRes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesCancelBetReq*
Arena::CreateMaybeMessage< ::proto::MinesCancelBetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesCancelBetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesCancelBetRes*
Arena::CreateMaybeMessage< ::proto::MinesCancelBetRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesCancelBetRes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::MinesStartJettonNotify*
Arena::CreateMaybeMessage< ::proto::MinesStartJettonNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::MinesStartJettonNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GameStopJettonNotify*
Arena::CreateMaybeMessage< ::proto::GameStopJettonNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GameStopJettonNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::GameRankInfoNotify*
Arena::CreateMaybeMessage< ::proto::GameRankInfoNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::GameRankInfoNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ConnClose*
Arena::CreateMaybeMessage< ::proto::ConnClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ConnClose >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
